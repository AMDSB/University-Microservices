package com.universite.teacher.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DisponibiliteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisponibiliteAllPropertiesEquals(Disponibilite expected, Disponibilite actual) {
        assertDisponibiliteAutoGeneratedPropertiesEquals(expected, actual);
        assertDisponibiliteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisponibiliteAllUpdatablePropertiesEquals(Disponibilite expected, Disponibilite actual) {
        assertDisponibiliteUpdatableFieldsEquals(expected, actual);
        assertDisponibiliteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisponibiliteAutoGeneratedPropertiesEquals(Disponibilite expected, Disponibilite actual) {
        assertThat(actual)
            .as("Verify Disponibilite auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisponibiliteUpdatableFieldsEquals(Disponibilite expected, Disponibilite actual) {
        assertThat(actual)
            .as("Verify Disponibilite relevant properties")
            .satisfies(a -> assertThat(a.getIdDisponibilite()).as("check idDisponibilite").isEqualTo(expected.getIdDisponibilite()))
            .satisfies(a -> assertThat(a.getDebutDisponibilite()).as("check debutDisponibilite").isEqualTo(expected.getDebutDisponibilite())
            )
            .satisfies(a -> assertThat(a.getFinDisponibilite()).as("check finDisponibilite").isEqualTo(expected.getFinDisponibilite()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDisponibiliteUpdatableRelationshipsEquals(Disponibilite expected, Disponibilite actual) {
        // empty method
    }
}
